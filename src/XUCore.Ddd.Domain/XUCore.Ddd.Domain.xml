<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.Ddd.Domain</name>
    </assembly>
    <members>
        <member name="T:XUCore.Ddd.Domain.Bus.IMediatorHandler">
            <summary>
            消息总线
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.IMediatorHandler.PublishEvent``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布事件通知
            </summary>
            <typeparam name="TNotification"></typeparam>
            <param name="event">通知事件</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.IMediatorHandler.SendCommand``1(XUCore.Ddd.Domain.Commands.Command{``0},System.Threading.CancellationToken)">
            <summary>
            发送命令请求
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command">命令</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.Command`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.Command`1.ValidationResult">
            <summary>
            命令验证
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command`1.GetErrors">
            <summary>
            获取验证的错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command`1.GetErrors(System.String)">
            <summary>
            获取验证的错误消息
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command`1.IsVaild">
            <summary>
            是否验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandHandler`2">
            <summary>
            领域命令处理程序
            用来作为全部处理程序的基类，提供公共方法和接口数据
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.Commands.CommandHandler`2.bus">
            <summary>
            注入中介处理接口（目前用不到，在领域事件中用来发布事件）
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.Commands.CommandHandler`2.mapper">
            <summary>
            AutoMapper
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor(XUCore.Ddd.Domain.Bus.IMediatorHandler)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor(XUCore.Ddd.Domain.Bus.IMediatorHandler,AutoMapper.IMapper)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
            <param name="mapper">automapper</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandValidator`1">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandId`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandId`1.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandId`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIdValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIdValidator`2.AddIdValidator">
            <summary>
            Id验证（大于0）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIds`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandIds`1.Ids">
            <summary>
            主键Id集合
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIds`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIdsValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIdsValidator`2.AddIdsValidator">
            <summary>
            Id集合验证（不可为空）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandLimit`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandLimit`1.Limit">
            <summary>
            记录数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandLimit`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandLimitValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandLimitValidator`2.AddLimitVaildator(System.Int32)">
            <summary>
            Limit验证（大于等于0 且小于默认100）
            </summary>
            <param name="max">最大数值（默认100）</param>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandPage`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandPage`1.CurrentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandPage`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandPage`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandPageValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandPageValidator`2.AddPageVaildator(System.Int32)">
            <summary>
            分页验证(当前页码必须大于0，分页大小必须大于0且小于等于指定大小)
            </summary>
            <param name="maxPageSize">最大分页大小（默认100）</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddRequestBehaviour(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{XUCore.Ddd.Domain.RequestOptions})">
            <summary>
            注册 DDD Mediator 监控等插件
            </summary>
            <param name="services"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddMediatorBus``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD Mediator 消息总线
            </summary>
            <typeparam name="TMediator"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddEventStore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD 事件存储
            </summary>
            <typeparam name="TEventStore"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Entity">
            <summary>
            定义领域实体基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Entity.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity.Equals(System.Object)">
            <summary>
            重写方法 相等运算
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity.op_Equality(XUCore.Ddd.Domain.Entity,XUCore.Ddd.Domain.Entity)">
            <summary>
            重写方法 实体比较 ==
            </summary>
            <param name="a">领域实体a</param>
            <param name="b">领域实体b</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity.op_Inequality(XUCore.Ddd.Domain.Entity,XUCore.Ddd.Domain.Entity)">
            <summary>
            重写方法 实体比较 !=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity.GetHashCode">
            <summary>
            获取哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity.ToString">
            <summary>
            输出领域对象的状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.Event">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Event.Timestamp">
            <summary>
            当前触发时间
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.Event.#ctor">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.IEventStoreService">
            <summary>
            领域存储服务接口
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.IEventStoreService.Save``1(``0)">
            <summary>
            将命令模型进行保存
            </summary>
            <typeparam name="T"> 泛型：Event命令模型</typeparam>
            <param name="theEvent"></param>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.Message">
            <summary>
            抽象类Message，用来获取我们事件执行过程中的类名
            然后并且添加聚合根
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Message.MessageType">
            <summary>
            消息类型（命令）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Message.AggregateId">
            <summary>
            聚合根（也可用Guid，但是由于目前大多数的Id均为UUID所以这里也使用long）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Message.AggregateType">
            <summary>
            聚合根类型（主要配合聚合根的Id解决重复的问题）
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.Message.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.NotificationEventHandler`1">
            <summary>
            事件通知抽象基类
            </summary>
            <typeparam name="TNotification"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.NotificationEventHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.RequestOptions">
            <summary>
            Mediator 请求插件启用配置
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Logger">
            <summary>
            请求日志，输出请求命令具体位置记录
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Performance">
            <summary>
            性能监控，输出记录超过500ms的请求
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Validation">
            <summary>
            自动验证，<see cref="T:FluentValidation.IValidator"/>异常抛出，需要配合try catch捕获处理
            </summary>
        </member>
    </members>
</doc>
