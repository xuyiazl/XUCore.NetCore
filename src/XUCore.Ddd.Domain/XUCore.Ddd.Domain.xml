<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.Ddd.Domain</name>
    </assembly>
    <members>
        <member name="T:XUCore.Ddd.Domain.Bus.IMediatorHandler">
            <summary>
            消息总线
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.IMediatorHandler.PublishEvent``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布事件通知
            </summary>
            <typeparam name="TNotification"></typeparam>
            <param name="event">通知事件</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.IMediatorHandler.SendCommand``1(XUCore.Ddd.Domain.Commands.Command{``0},System.Threading.CancellationToken)">
            <summary>
            发送命令请求
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command">命令</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Bus.MediatorMemoryBus">
            <summary>
            Mediator 消息中介发布请求和通知
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.Bus.MediatorMemoryBus.NotEventStore">
            <summary>
            不需要存储的事件
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.MediatorMemoryBus.PublishEvent``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布事件通知
            </summary>
            <typeparam name="TNotification"></typeparam>
            <param name="event">通知事件</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Bus.MediatorMemoryBus.SendCommand``1(XUCore.Ddd.Domain.Commands.Command{``0},System.Threading.CancellationToken)">
            <summary>
            发送命令请求
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command">命令</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.ClaimAttributes">
            <summary>
            Claim属性
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.IdentityServerUserId">
            <summary>
            认证授权用户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserNickName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserToken">
            <summary>
            用户登录token
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.RefreshExpires">
            <summary>
            刷新有效期
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.TenantType">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.DataIsolationType">
            <summary>
            数据隔离
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.Command">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.Command.ValidationResult">
            <summary>
            命令验证
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command.GetErrors">
            <summary>
            获取验证的错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command.GetErrors(System.String)">
            <summary>
            获取验证的错误消息
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command.IsVaild">
            <summary>
            是否验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandHandler`2">
            <summary>
            领域命令处理程序
            用来作为全部处理程序的基类，提供公共方法和接口数据
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.Commands.CommandHandler`2.bus">
            <summary>
            注入中介处理接口（目前用不到，在领域事件中用来发布事件）
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.Commands.CommandHandler`2.mapper">
            <summary>
            AutoMapper
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor(XUCore.Ddd.Domain.Bus.IMediatorHandler)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.#ctor(XUCore.Ddd.Domain.Bus.IMediatorHandler,AutoMapper.IMapper)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
            <param name="mapper">automapper</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandValidator`1">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.Command`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.Command`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandId`2">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandId`2.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandId`2.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIdValidator`3">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIdValidator`3.AddIdValidator">
            <summary>
            Id验证
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIds`2">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandIds`2.Ids">
            <summary>
            主键Id集合
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIds`2.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandIdsValidator`3">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandIdsValidator`3.AddIdsValidator">
            <summary>
            Id集合验证（不可为空）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandLimit`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandLimit`1.Limit">
            <summary>
            记录数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandLimit`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandLimitValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandLimitValidator`2.AddLimitVaildator(System.Int32)">
            <summary>
            Limit验证（大于等于0 且小于默认100）
            </summary>
            <param name="max">最大数值（默认100）</param>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandPage`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandPage`1.CurrentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Commands.CommandPage`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandPage`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Commands.CommandPageValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Commands.CommandPageValidator`2.AddPageVaildator(System.Int32)">
            <summary>
            分页验证(当前页码必须大于0，分页大小必须大于0且小于等于指定大小)
            </summary>
            <param name="maxPageSize">最大分页大小（默认100）</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddRequestBehaviour(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{XUCore.Ddd.Domain.RequestOptions})">
            <summary>
            注册 DDD Mediator 监控等插件
            </summary>
            <param name="services"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddMediatorBus``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD Mediator 消息总线
            </summary>
            <typeparam name="TMediator"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddEventStore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD 事件存储
            </summary>
            <typeparam name="TEventStore"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Entity`1">
            <summary>
            定义领域实体基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Entity`1.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.Equals(System.Object)">
            <summary>
            重写方法 相等运算
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.op_Equality(XUCore.Ddd.Domain.Entity{`0},XUCore.Ddd.Domain.Entity{`0})">
            <summary>
            重写方法 实体比较 ==
            </summary>
            <param name="a">领域实体a</param>
            <param name="b">领域实体b</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.op_Inequality(XUCore.Ddd.Domain.Entity{`0},XUCore.Ddd.Domain.Entity{`0})">
            <summary>
            重写方法 实体比较 !=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.GetHashCode">
            <summary>
            获取哈希（为了保持领域一致性，采用Id获取hashcode，实体主外键映射实体中，添加多条记录的时候，ICollection不可以使用HashSet，否则无法添加）
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.ToString">
            <summary>
            输出领域对象的状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.Event">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Event.Timestamp">
            <summary>
            当前触发时间
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.Event.#ctor">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.IEventStoreService">
            <summary>
            领域存储服务接口
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.IEventStoreService.Save``1(``0)">
            <summary>
            将命令模型进行保存
            </summary>
            <typeparam name="T"> 泛型：Event命令模型</typeparam>
            <param name="theEvent"></param>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.Message">
            <summary>
            抽象类Message，用来获取我们事件执行过程中的类名
            然后并且添加聚合根
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Message.MessageType">
            <summary>
            消息类型（命令）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Events.Message.AggregateId">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.Message.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Events.NotificationEventHandler`1">
            <summary>
            事件通知抽象基类
            </summary>
            <typeparam name="TNotification"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.Events.NotificationEventHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Filters.CommandValidationAttribute">
            <summary>
            FluentValidation 验证拦截（因使用动态API，自动验证失效，导致需要手工操作。）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IUser">
            <summary>
            用户信息接口
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.GetId``1">
            <summary>
            用户Id转换类型
            </summary>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.SetToken(System.String,System.String)">
            <summary>
            将登录的用户写入内存作为标记，处理强制重新获取jwt，模拟退出登录（可以使用redis）
            </summary>
            <param name="id"></param>
            <param name="token"></param>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.RemoveToken">
            <summary>
            删除登录标记，模拟退出
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.VaildToken(System.String)">
            <summary>
            验证token是否一致
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.RequestOptions">
            <summary>
            Mediator 请求插件启用配置
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Logger">
            <summary>
            请求日志，输出请求命令具体位置记录
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Performance">
            <summary>
            性能监控，输出记录超过500ms的请求
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Validation">
            <summary>
            自动验证，<see cref="T:FluentValidation.IValidator"/>异常抛出，需要配合try catch捕获处理
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.User">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.Identity">
            <summary>
            IIdentity
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.Id">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.GetId``1">
            <summary>
            用户Id转换类型
            </summary>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.SetToken(System.String,System.String)">
            <summary>
            将登录的用户写入内存作为标记，处理强制重新获取jwt，模拟退出登录（可以使用redis）
            </summary>
            <param name="id"></param>
            <param name="token"></param>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.RemoveToken">
            <summary>
            删除登录标记，模拟退出
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.VaildToken(System.String)">
            <summary>
            验证token是否一致
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
    </members>
</doc>
