<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.Ddd.Doman</name>
    </assembly>
    <members>
        <member name="T:XUCore.Ddd.Doman.Commands.Command`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Doman.Commands.CommandHandler`2">
            <summary>
            领域命令处理程序
            用来作为全部处理程序的基类，提供公共方法和接口数据
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Doman.Commands.CommandValidator`1">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="T:XUCore.Ddd.Doman.Entity">
            <summary>
            定义领域实体基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Doman.Entity.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Doman.Entity.Equals(System.Object)">
            <summary>
            重写方法 相等运算
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Doman.Entity.op_Equality(XUCore.Ddd.Doman.Entity,XUCore.Ddd.Doman.Entity)">
            <summary>
            重写方法 实体比较 ==
            </summary>
            <param name="a">领域实体a</param>
            <param name="b">领域实体b</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Doman.Entity.op_Inequality(XUCore.Ddd.Doman.Entity,XUCore.Ddd.Doman.Entity)">
            <summary>
            重写方法 实体比较 !=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Doman.Entity.GetHashCode">
            <summary>
            获取哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Doman.Entity.ToString">
            <summary>
            输出领域对象的状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Doman.Events.Event">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Doman.Events.Event.Timestamp">
            <summary>
            当前触发时间
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Doman.Events.IEventStoreService">
            <summary>
            领域存储服务接口
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Doman.Events.IEventStoreService.Save``1(``0)">
            <summary>
            将命令模型进行保存
            </summary>
            <typeparam name="T"> 泛型：Event命令模型</typeparam>
            <param name="theEvent"></param>
        </member>
        <member name="T:XUCore.Ddd.Doman.Events.Message`1">
            <summary>
            抽象类Message，用来获取我们事件执行过程中的类名
            然后并且添加聚合根
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Doman.Events.Message`1.MessageType">
            <summary>
            消息类型（命令）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Doman.Events.Message`1.AggregateId">
            <summary>
            聚合根（也可用Guid，但是由于目前大多数的Id均为UUID所以这里也使用long）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Doman.Events.Message`1.AggregateType">
            <summary>
            聚合根类型（主要配合聚合根的Id解决重复的问题）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Doman.Events.NotificationEventHandler`1">
            <summary>
            事件通知抽象基类
            </summary>
            <typeparam name="TNotification"></typeparam>
        </member>
    </members>
</doc>
