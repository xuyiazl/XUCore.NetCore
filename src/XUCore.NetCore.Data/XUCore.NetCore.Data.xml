<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.NetCore.Data</name>
    </assembly>
    <members>
        <member name="M:XUCore.NetCore.Data.BulkExtensions.BatchUtil.GetSqlUpdate``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext,System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            get Update Sql
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.BulkExtensions.BatchUtil.CreateUpdateBody(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Linq.Expressions.Expression,XUCore.NetCore.Data.BulkExtensions.DbServer,System.Text.StringBuilder@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Recursive analytic expression 
            </summary>
            <param name="tableAlias"></param>
            <param name="expression"></param>
            <param name="sqlColumns"></param>
            <param name="sqlParameters"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.BulkExtensions.SqlQueryBuilder.DeleteTable(System.String)">
            <summary>
            Used for Sqlite, Truncate table 
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.IDbContext">
            <summary>
            多数据库操作继承该接口
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbContext.ConnectionStrings">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.Set``1">
            <summary>
            dbset
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.SaveChanges">
            <summary>
            保存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步保存
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbContext.Database">
            <summary>
            database
            </summary>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbContext.AutoTransactionsEnabled">
            <summary>
            <para>获取或设置一个值，该值指示是否创建事务由<see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>自动。</para>
            <para><see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>如果没有调用'BeginTransaction'或'UseTransaction'方法的。将此值设置为false也会禁用<see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy"/></para>
            <para>对于<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>默认值为true，这意味着<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>将始终使用事务在保存更改。</para>
            <para>将此值设置为false应该非常小心，因为数据库如果<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>失败，可能会处于损坏状态。</para>
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.CreateExecutionStrategy">
            <summary>
            创建执行策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.BeginTransaction">
            <summary>
            事务开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            异步事务开始
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.UseTransaction(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)">
            <summary>
            设置DbTransaction用于在db上的数据库操作。
            </summary>
            <param name="contextTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.UseTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Threading.CancellationToken)">
            <summary>
            设置DbTransaction用于在db上的数据库操作。
            </summary>
            <param name="contextTransaction"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.RollbackTransaction">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbContext.CanConnect">
            <summary>
            是否连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbContext.CurrentTransaction">
            <summary>
            当前事务
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.IDbRepository`1">
            <summary>
            通用仓储库的方法定义
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbRepository`1.DbContext">
            <summary>
            当前上下文
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.IDbRepository`1.Table">
            <summary>
            当前DbSet对象
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.SaveChanges">
            <summary>
            同步提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Add(`0,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Update(`0,System.Boolean)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Delete(`0,System.Boolean)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Delete(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步提交
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.AddAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量写入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetById(System.Object)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="currentPage">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="currentPage">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.ExecuteSql(System.String,System.Data.IDataParameter[])">
            <summary>
            通过EF执行原生SQL 返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.Select``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.SelectList``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.SelectList(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合(DataTable)
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.SelectDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数返回数据集(DataSet);
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.IDbRepository`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="dbTransaction"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.DBContextBase">
            <summary>
            基于db上下文拓展工厂，用于拓展XUCore.NetCore.Data.BulkExtensions的GitHub开源项目
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.DBContextBase.AutoTransactionsEnabled">
            <summary>
            <para>获取或设置一个值，该值指示是否创建事务由<see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>自动。</para>
            <para><see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>如果没有调用'BeginTransaction'或'UseTransaction'方法的。将此值设置为false也会禁用<see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy"/></para>
            <para>对于<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>默认值为true，这意味着<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>将始终使用事务在保存更改。</para>
            <para>将此值设置为false应该非常小心，因为数据库如果<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>失败，可能会处于损坏状态。</para>
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.DBContextFactory.ConnectionStrings">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.DBContextFactory.Assemblies">
            <summary>
            需要检索的程序集
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DBContextFactory.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            EF依赖mappingPath，将当前项目文件夹的Entity的映射文件执行注入操作
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.DbRepository`1">
            <summary>
            数据库的基础仓储库
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.DbRepository`1.DbContext">
            <summary>
            当前上下文
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.DbRepository`1.Table">
            <summary>
            当前DbSet对象
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.SaveChanges">
            <summary>
            同步提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Add(`0,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Update(`0,System.Boolean)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Delete(`0,System.Boolean)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Delete(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步提交
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.AddAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量写入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetById(System.Object)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="currentPage">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="currentPage">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.ExecuteSql(System.String,System.Data.IDataParameter[])">
            <summary>
            通过EF执行原生SQL 返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.Select``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.SelectList``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.SelectList(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合(DataEntity)
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns>返回DataEntity</returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.SelectDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数返回数据集(DataSet);
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns>返回DataSet</returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.DbRepository`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="dbTransaction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1">
            <summary>
            net core 跟 netFramework下面的EF统一配置字段不一致
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.primaryKey">
            <summary>
            设置主键
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.Identity">
            <summary>
            设置自增
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.NoIdentity">
            <summary>
            ef设置不自增
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.ignores">
            <summary>
            需要排除的字段
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.insertDefault">
            <summary>
            仅在添加时设置指定字段默认值
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.insertOrUpdates">
            <summary>
            仅在添加或者修改时设置默认值
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.SetIndentity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置自增属性
            </summary>
            <param name="Identity"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.SetNoIndentity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            ef设置不自增
            </summary>
            <param name="NoIdentity"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.SetIgnore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
             <summary>
            在ef映射过程中排除的字段,允许多个字段排除
             </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.SetValueDefaultAdd(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            在ef添加记录的时候默认值添加，即不赋值
            </summary>
            <param name="insertDefault"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.EntityTypeConfiguration`1.SetValueInsertOrUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            仅在添加或者修改时设置默认值
            </summary>
            <param name="insertOrUpdates"></param>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.MsSqlRepository`1">
            <summary>
            sql server的仓库
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.PagedExtensions">
            <summary>
            分页扩展
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.PagedExtensions.CreatePagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            创建分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">查询条件</param>
            <param name="pageNumber">页码</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.PagedExtensions.CreatePagedListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            创建分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">查询条件</param>
            <param name="pageNumber">页码</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1">
            <summary>
            数据库领域操作的基础对象
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Read">
            <summary>
            只读对象
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Write">
            <summary>
            只写对象
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Table">
            <summary>
            当前DbSet对象
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.SaveChanges">
            <summary>
            同步提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Add(`0,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Update(`0,System.Boolean)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Update(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Delete(`0,System.Boolean)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Delete(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步提交
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.AddAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量写入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetById(System.Object)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取所有数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="pageNumber">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)">
            <summary>
            查询一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取所有数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="pageNumber">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.ExecuteSql(System.String,System.Data.IDataParameter[])">
            <summary>
            通过EF执行原生SQL 返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.Select``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.SelectList``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.SelectList(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合(DataTable)
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.SelectDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数返回数据集(DataSet);
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.DbService`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1">
            <summary>
            数据领域层接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Read">
            <summary>
            只读对象
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Write">
            <summary>
            只写对象
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Table">
            <summary>
            当前DbSet对象
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.SaveChanges">
            <summary>
            同步提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Add(`0,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Update(`0,System.Boolean)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Update(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Delete(`0,System.Boolean)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Delete(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步提交
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.AddAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步插入一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量写入数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            更新一条数据（全量更新）
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量更新数据（全量更新）
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            删除一条数据
            </summary>
            <param name="entity"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            批量删除数据
            </summary>
            <param name="entities"></param>
            <param name="isSaveChange">是否提交</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetById(System.Object)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="pageNumber">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            根据主键获取一条数据
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Threading.CancellationToken)">
            <summary>
            根据条件获取一条数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="skip">起始位置（默认为-1，不设置 一般从0开始）</param>
            <param name="limit">记录数（默认为0，不设置）</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取分页数据
            </summary>
            <param name="selector"></param>
            <param name="orderby">exp:“Id desc,CreateTime desc”</param>
            <param name="pageNumber">页码（最小为1）</param>
            <param name="pageSize">分页大小</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any数据检测
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            获取记录数
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="updateValues">更新的新数据数据</param>
            <param name="updateColumns">指定字段，如果需要更新为默认数据，那么需要指定字段，因为在内部实现会排除掉没有赋值的默认字段数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量更新（部分字段）
            </summary>
            <param name="selector">查询条件</param>
            <param name="Update">更新的新数据数据</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            根据条件批量删除
            </summary>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.ExecuteSql(System.String,System.Data.IDataParameter[])">
            <summary>
            通过EF执行原生SQL 返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.Select``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.SelectList``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.SelectList(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数 返回查询结果集合(DataTable)
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.SelectDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过ADO.NET通过EF执行原生SQL 返回影响行数返回数据集(DataSet);
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.ServiceProvider.IDbService`1.ExecuteAdoNet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            通过原生执行ADONET查询操作
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransaction(XUCore.NetCore.Data.DbService.IDbContext,System.Action{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction},System.Action{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Exception})">
            <summary>
            创建事务
            </summary>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionAsync(XUCore.NetCore.Data.DbService.IDbContext,System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            创建事务
            </summary>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransaction``1(XUCore.NetCore.Data.DbService.IDbContext,System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,``0},System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Exception,``0})">
            <summary>
            创建事务
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionAsync``1(XUCore.NetCore.Data.DbService.IDbContext,System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            创建事务
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionScope(XUCore.NetCore.Data.DbService.IDbContext,System.Action{System.Transactions.TransactionScope},System.Action{System.Transactions.TransactionScope,System.Exception})">
            <summary>
            创建事务（适用于多数据库连接的情况）
            </summary>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionScopeAsync(XUCore.NetCore.Data.DbService.IDbContext,System.Func{System.Transactions.TransactionScope,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Transactions.TransactionScope,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            创建事务（适用于多数据库连接的情况）
            </summary>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionScope``1(XUCore.NetCore.Data.DbService.IDbContext,System.Func{System.Transactions.TransactionScope,``0},System.Func{System.Transactions.TransactionScope,System.Exception,``0})">
            <summary>
            创建事务（适用于多数据库连接的情况）
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Data.DbService.TransactionExtensions.CreateTransactionScope``1(XUCore.NetCore.Data.DbService.IDbContext,System.Func{System.Transactions.TransactionScope,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Transactions.TransactionScope,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            创建事务（适用于多数据库连接的情况）
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbContext"></param>
            <param name="run">执行内容</param>
            <param name="error">异常消息</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
