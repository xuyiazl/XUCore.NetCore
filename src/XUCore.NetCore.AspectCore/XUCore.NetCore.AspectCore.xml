<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.NetCore.AspectCore</name>
    </assembly>
    <members>
        <member name="T:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute.HashKey">
            <summary>
            HashKey
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute.Key">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序。
            支持属性参数的替换，{Id}-{Name} 等于 1-test
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute.Seconds">
            <summary>
            缓存时间（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute.IsOpen">
            <summary>
            是否开启缓存
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.AspectCacheAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute">
            <summary>
            缓存拦截器（主动拉取器）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute.HashKey">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute.Key">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序
            支持属性参数的替换，{Id}-{Name} 等于 1-test
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute.RefreshSeconds">
            <summary>
            刷新时间（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute.IsOpen">
            <summary>
            是否开启缓存
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.AspectCachePullAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.AspectCacheRemoveAttribute">
            <summary>
            缓存拦截器（删除缓存）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheRemoveAttribute.HashKey">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.AspectCacheRemoveAttribute.Key">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序，（不支持模型）
            支持属性参数的替换，{Id}-{Name} 等于 1-test
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.AspectCacheRemoveAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.CacheOptions.CacheMode">
            <summary>
            启用缓存类型
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.CacheOptions.RedisRead">
            <summary>
            只读链接地址
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Cache.CacheOptions.RedisWrite">
            <summary>
            只写链接地址
            </summary>
        </member>
        <member name="F:XUCore.NetCore.AspectCore.Cache.CacheMode.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:XUCore.NetCore.AspectCore.Cache.CacheMode.Redis">
            <summary>
            redis缓存
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.CacheServiceCollectionExtensions.AddCacheInterceptor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{XUCore.NetCore.AspectCore.Cache.CacheOptions})">
            <summary>
            注册缓存拦截服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.CacheServiceCollectionExtensions.UseCacheTiggerService(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            启用缓存拦截服务
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.CacheServiceCollectionExtensions.AddInterceptor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册拦截器
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.CacheServiceCollectionExtensions.UseInterceptorHostBuilder(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            启用拦截器，使用 ===》aspect ServiceContextProviderFactory
            </summary>
            <param name="hostBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.QuartzJobFactory">
            <summary>
            JobFactory ：实现在Timer触发的时候注入生成对应的Job组件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.AspectCore.Cache.QuartzJobFactory.serviceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzJobFactory.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
            Called by the scheduler at the time of the trigger firing, in order to produce a Quartz.IJob instance on which to call Execute.
            </summary>
            <param name="bundle"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzJobFactory.ReturnJob(Quartz.IJob)">
            <summary>
            Allows the job factory to destroy/cleanup the job if needed.
            </summary>
            <param name="job"></param>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.QuartzRefreshJob">
            <summary>
            刷新任务
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.QuartzService">
            <summary>
            Quartz.Net启动后注册job和trigger
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Quartz.Net启动后注册job和trigger
            </summary>
            <param name="serviceProvider"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzService.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.QuartzService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Cache.ICacheService">
            <summary>
            缓存服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.ICacheService.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.ICacheService.Set(System.String,System.Object)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.ICacheService.Set(System.String,System.TimeSpan,System.Object)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="expirationTime"></param>
            <param name="value"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Cache.ICacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.IgnoreAttribute">
            <summary>
            忽略拦截器基类
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.InterceptorBase">
            <summary>
            拦截器基类
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.NotEmptyAttribute">
            <summary>
            验证参数不可为空
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.NotNullAttribute">
            <summary>
            验证参数不可为null
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.ParameterInterceptorBase">
            <summary>
            参数缓存拦截基类
            </summary>
        </member>
    </members>
</doc>
