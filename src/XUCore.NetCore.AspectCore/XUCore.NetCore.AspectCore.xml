<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.NetCore.AspectCore</name>
    </assembly>
    <members>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.Prefix">
            <summary>
            缓存前缀
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.Key">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.ParamterKey">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.Seconds">
            <summary>
            缓存时间（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.IsOpen">
            <summary>
            是否开启缓存
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheMethodAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.CacheRemoveAttribute">
            <summary>
            缓存拦截器（删除缓存）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheRemoveAttribute.Prefix">
            <summary>
            缓存前缀
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheRemoveAttribute.Key">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheRemoveAttribute.ParamterKey">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序，（不支持模型）
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheRemoveAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheServiceCollectionExtensions.AddCacheService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册缓存拦截服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheServiceCollectionExtensions.UseCacheService(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            
             <summary>
             启用缓存拦截服务
             </summary>
             <param name="app"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheServiceCollectionExtensions.UseCacheHostBuilder(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            启用拦截器，使用 ===》aspect ServiceContextProviderFactory
            </summary>
            <param name="hostBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.Prefix">
            <summary>
            缓存前缀
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.Key">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.ParamterKey">
            <summary>
            缓存key（参数组成部分，如果不需要则不填写），参考string.Format的参数顺序
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.Seconds">
            <summary>
            刷新时间（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.IsOpen">
            <summary>
            是否开启缓存
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.CacheTiggerAttribute.#ctor">
            <summary>
            缓存拦截器
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.ICacheService">
            <summary>
            缓存服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.ICacheService.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.ICacheService.Set(System.String,System.Object)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.ICacheService.Set(System.String,System.TimeSpan,System.Object)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="expirationTime"></param>
            <param name="value"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.ICacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.QuartzJobFactory">
            <summary>
            JobFactory ：实现在Timer触发的时候注入生成对应的Job组件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.AspectCore.Interceptor.QuartzJobFactory.serviceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzJobFactory.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
            Called by the scheduler at the time of the trigger firing, in order to produce a Quartz.IJob instance on which to call Execute.
            </summary>
            <param name="bundle"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzJobFactory.ReturnJob(Quartz.IJob)">
            <summary>
            Allows the job factory to destroy/cleanup the job if needed.
            </summary>
            <param name="job"></param>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.QuartzRefreshJob">
            <summary>
            刷新任务
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AspectCore.Interceptor.QuartzService">
            <summary>
            Quartz.Net启动后注册job和trigger
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Quartz.Net启动后注册job和trigger
            </summary>
            <param name="serviceProvider"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzService.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AspectCore.Interceptor.QuartzService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
    </members>
</doc>
