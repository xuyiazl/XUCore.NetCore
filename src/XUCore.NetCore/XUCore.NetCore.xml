<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.NetCore</name>
    </assembly>
    <members>
        <member name="T:XUCore.NetCore.AccessControl.AccessControlAttribute">
            <summary>
            权限控制
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AccessControl.AccessControlMiddleware">
            <summary>
            AccessControlHelperMiddleware
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.AccessControlMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{XUCore.NetCore.AccessControl.AccessControlOptions},Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.AccessControl.AccessControlMiddleware})">
            <summary>
            Creates a new instance of <see cref="T:XUCore.NetCore.AccessControl.AccessControlMiddleware"/>
            </summary>
            <param name="next">The delegate representing the next middleware in the request pipeline.</param>
            <param name="options"></param>
            <param name="logger">The Logger Factory.</param>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.AccessControlMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the middleware.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the current request.</param>
            <returns>A task that represents the execution of this middleware.</returns>
        </member>
        <member name="T:XUCore.NetCore.AccessControl.AccessControlTagHelper">
            <summary>
            AccessControlTagHelper
            add support for tagHelper
            https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring?view=aspnetcore-2.1#condition-tag-helper
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.HtmlHelperExtension.SparkActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object,System.Object,System.String)">
            <summary>
            SparkActionLink
            </summary>
            <param name="helper">HtmlHelper</param>
            <param name="linkText">linkText</param>
            <param name="actionName">actionName</param>
            <param name="controllerName">controllerName</param>
            <param name="routeValues">routeValues</param>
            <param name="htmlAttributes">htmlAttributes</param>
            <param name="accessKey">accessKey</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.HtmlHelperExtension.SparkContainer(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)">
            <summary>
            SparkContainer
            </summary>
            <param name="helper">HtmlHelper</param>
            <param name="tagName">标签名称</param>
            <param name="attributes">htmlAttributes</param>
            <param name="accessKey">accessKey</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.AccessControl.IControlAccessStrategy">
            <summary>
            view component access strategy
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.IControlAccessStrategy.IsControlCanAccess(System.String)">
            <summary>
            view component access strategy
            </summary>
        </member>
        <member name="M:XUCore.NetCore.AccessControl.IResourceAccessStrategy.IsCanAccess(System.String)">
            <summary>
            Is resource can be accessed
            </summary>
            <param name="accessKey">accessKey</param>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.AccessControl.IResourceAccessStrategy.DisallowedCommonResult">
            <summary>
            AccessStrategyName
            </summary>
        </member>
        <member name="T:XUCore.NetCore.AccessControl.NoAccessControlAttribute">
            <summary>
            NoAccessControl
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AppAuthorizeAttribute">
            <summary>
            策略授权特性
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies">多个策略</param>
        </member>
        <member name="P:XUCore.NetCore.Authorization.AppAuthorizeAttribute.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AppAuthorizeHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权验证核心方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            策略验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeHandler.AuthorizeHandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AppAuthorizeProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.AppAuthorizeProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:XUCore.NetCore.Authorization.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Authorization.AuthorizationServiceCollectionExtensions">
            <summary>
            策略授权服务拓展类
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.AuthorizationServiceCollectionExtensions.AddAppAuthorization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            添加策略授权服务
            </summary>
            <typeparam name="TAuthorizationHandler">策略授权处理程序</typeparam>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <param name="enableGlobalAuthorize">是否启用全局授权</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:XUCore.NetCore.Authorization.JWTAuthorizationServiceCollectionExtensions">
            <summary>
            JWT 授权服务拓展类
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTAuthorizationServiceCollectionExtensions.AddJwt(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions},System.Boolean)">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="authenticationBuilder"></param>
            <param name="tokenValidationParameters">token 验证参数</param>
            <param name="jwtBearerConfigure"></param>
            <param name="enableGlobalAuthorize">启动全局授权</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTAuthorizationServiceCollectionExtensions.AddJwt(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions},System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="services"></param>
            <param name="authenticationConfigure">授权配置</param>
            <param name="tokenValidationParameters">token 验证参数</param>
            <param name="jwtBearerConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTAuthorizationServiceCollectionExtensions.AddJwt``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions},System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions},System.Boolean)">
            <summary>
            添加 JWT 授权
            </summary>
            <typeparam name="TAuthorizationHandler"></typeparam>
            <param name="services"></param>
            <param name="authenticationConfigure"></param>
            <param name="tokenValidationParameters"></param>
            <param name="jwtBearerConfigure"></param>
            <param name="enableGlobalAuthorize"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTAuthorizationServiceCollectionExtensions.ConfigureJWTOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:XUCore.NetCore.Authorization.JWTEncryption">
            <summary>
            JWT 加解密
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.Encrypt(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            生成 Token
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.Encrypt(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.Encrypt(System.String,System.String,System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.GenerateRefreshToken(System.String,System.Int32)">
            <summary>
            生成刷新 Token
            </summary>
            <param name="accessToken"></param>
            <param name="days">刷新 Token 有效期（天）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.Exchange(System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过过期Token 和 刷新Token 换取新的 Token
            </summary>
            <param name="expiredToken"></param>
            <param name="refreshToken"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <param name="clockSkew">刷新token容差值，秒做单位</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.AutoRefreshToken(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,System.Nullable{System.Int64},System.Int32,System.String,System.Int64)">
            <summary>
            自动刷新 Token 信息
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="expiredTime">新 Token 过期时间（分钟）</param>
            <param name="days">新刷新 Token 有效期（天）</param>
            <param name="tokenPrefix"></param>
            <param name="clockSkew"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.Validate(System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.ValidateJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.IdentityModel.JsonWebTokens.JsonWebToken@,System.String,System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="httpContext"></param>
            <param name="token"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.ReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.GetJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,System.String,System.String)">
            <summary>
            获取 JWT Bearer Token
            </summary>
            <param name="httpContext"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.GetJWTSettings">
            <summary>
            获取 JWT 配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.CreateTokenValidationParameters(XUCore.NetCore.Authorization.JWTSettingsOptions)">
            <summary>
            生成Token验证参数
            </summary>
            <param name="jwtSettings"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.CombinePayload(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            组合 Claims 负荷
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间，单位：分钟</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Authorization.JWTEncryption.SetDefaultJwtSettings(XUCore.NetCore.Authorization.JWTSettingsOptions)">
            <summary>
            设置默认 Jwt 配置
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="F:XUCore.NetCore.Authorization.JWTEncryption.StationaryClaimTypes">
            <summary>
            固定的 Claim 类型
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.JWTSettingsOptions">
            <summary>
            Jwt 配置
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidateIssuerSigningKey">
            <summary>
            验证签发方密钥
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.IssuerSigningKey">
            <summary>
            签发方密钥
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidateIssuer">
            <summary>
            验证签发方
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidIssuer">
            <summary>
            签发方
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidateAudience">
            <summary>
            验证签收方
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidAudience">
            <summary>
            签收方
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ValidateLifetime">
            <summary>
            验证生存期
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ClockSkew">
            <summary>
            过期时间容错值，解决服务器端时间不同步问题（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.ExpiredTime">
            <summary>
            过期时间（分钟）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Authorization.JWTSettingsOptions.Algorithm">
            <summary>
            加密算法
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Authorization.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Authorization.SecurityDefineAttribute">
            <summary>
            安全定义特性
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.SecurityDefineAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Authorization.SecurityDefineAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:XUCore.NetCore.Authorization.SecurityDefineAttribute.ResourceId">
            <summary>
            资源Id，必须是唯一的
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Controllers.ApiControllerBase">
            <summary>
            WebApi控制器基类
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Controllers.ApiControllerBase._logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Controllers.ApiControllerBase.Success(System.String,System.String,System.Object)">
            <summary>
            返回成功消息
            </summary>
            <param name="subCode">业务状态码</param>
            <param name="data">数据</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Controllers.ApiControllerBase.Fail(System.String,System.String)">
            <summary>
            返回失败消息
            </summary>
            <param name="subCode">业务状态码</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Controllers.AreaApiControllerBase">
            <summary>
            WebApi的区域控制器基类
            </summary>
        </member>
        <member name="T:XUCore.NetCore.DependencyInjection">
            <summary>
            服务扩展
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DependencyInjection.AddScanLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            指定扫描方式，扫描对象。
            </summary>
            <param name="services"></param>
            <param name="assemblyFilter">指定当前项目需要扫描的程序集名，“Demo.dll”中的Demo</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.DependencyInjection.AddScanLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Scrutor.ITypeSourceSelector,Scrutor.IImplementationTypeSelector})">
            <summary>
            指定扫描方式，扫描对象。
            </summary>
            <param name="services"></param>
            <param name="fromAssembly">当指定为null，则默认从DependencyContext中扫描</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.IScoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="T:XUCore.NetCore.ISingleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:XUCore.NetCore.ITransient">
            <summary>
            每次创建新实例
            </summary>
        </member>
        <member name="T:XUCore.NetCore.DynamicWebApi.AssemblyDynamicWebApiOptions">
            <summary>
            Specifies the dynamic webapi options for the assembly.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.AssemblyDynamicWebApiOptions.ApiPrefix">
            <summary>
            Routing prefix for all APIs
            <para></para>
            Default value is null.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.AssemblyDynamicWebApiOptions.HttpVerb">
            <summary>
            API HTTP Verb.
            <para></para>
            Default value is null.
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.AssemblyDynamicWebApiOptions.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="apiPrefix">Routing prefix for all APIs</param>
            <param name="httpVerb">API HTTP Verb.</param>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiAttribute.Name">
            <summary>
            Controller Name
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiAttribute.Module">
            <summary>
            Equivalent to AreaName
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.DynamicWebApiConvention.CheckNoMapMethod(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            //不映射指定的方法
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.DynamicWebApiConvention.GetRestFulActionName(System.String)">
            <summary>
            Processing action name
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.DefaultHttpVerb">
            <summary>
            API HTTP Verb.
            <para></para>
            Default value is "POST".
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.DefaultApiPrefix">
            <summary>
            Routing prefix for all APIs
            <para></para>
            Default value is "api".
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.RemoveControllerPostfixes">
            <summary>
            Remove the dynamic API class(Controller) name postfix.
            <para></para>
            Default value is {"AppService", "ApplicationService"}.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.RemoveActionPostfixes">
            <summary>
            Remove the dynamic API class's method(Action) postfix.
            <para></para>
            Default value is {"Async"}.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.SplitControllerCamelCase">
            <summary>
            是否将Controller驼峰拆分
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.SplitControllerCamelCaseSeparator">
            <summary>
            Controller驼峰拆分分隔符
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.SplitActionCamelCase">
            <summary>
            是否将Action驼峰拆分
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.SplitActionCamelCaseSeparator">
            <summary>
            Action驼峰拆分分隔符
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.VersionSeparator">
            <summary>
            版本分隔符
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.FormBodyBindingIgnoredTypes">
            <summary>
            Ignore MVC Form Binding types.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.GetRestFulActionName">
            <summary>
            The method that processing the name of the action.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.AssemblyDynamicWebApiOptions">
            <summary>
            Specifies the dynamic webapi options for the assembly.
            </summary>
        </member>
        <member name="P:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.IsAutoSortAction">
            <summary>
            是否自动排序接口方法
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.Valid">
            <summary>
            Verify that all configurations are valid
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions.AddAssemblyOptions(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Add the dynamic webapi options for the assembly.
            </summary>
            <param name="assembly"></param>
            <param name="apiPreFix"></param>
            <param name="httpVerb"></param>
        </member>
        <member name="T:XUCore.NetCore.DynamicWebApi.DynamicWebApiServiceExtensions">
            <summary>
            Add Dynamic WebApi
            </summary>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.DynamicWebApiServiceExtensions.AddDynamicWebApi(Microsoft.Extensions.DependencyInjection.IServiceCollection,XUCore.NetCore.DynamicWebApi.DynamicWebApiOptions)">
            <summary>
            Add Dynamic WebApi to Container
            </summary>
            <param name="services"></param>
            <param name="options">configuration</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.Helper.ExtensionMethods.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.DynamicWebApi.Helper.ReflectionHelper.GetSingleAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a single attribute for a member.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">The member that will be checked for the attribute</param>
            <param name="inherit">Include inherited attributes</param>
            <returns>Returns the attribute object if found. Returns null if not found.</returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.CronCommon.SecondInterval(System.Int32)">
            <summary>
            秒级间隔
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.CronCommon.MinuteInterval(System.Int32)">
            <summary>
            分钟级间隔
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.CronCommon.HourInterval(System.Int32)">
            <summary>
            小时级间隔
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.EasyQuartz.IJobManager.Scheduler">
            <summary>
            Quartz Scheduler.
            </summary>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.AddAsync``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加任务
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="cron">表达式</param>
            <param name="name">任务名（唯一id）</param>
            <param name="map">参数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.AddAsync(System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加任务
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="cron">表达式</param>
            <param name="name">任务名（唯一id）</param>
            <param name="map">参数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.GetJobKeysAsync``1">
            <summary>
            获取所有的key
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.GetJobKeysAsync(System.Type)">
            <summary>
            获取所有的key
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.ExistAsync``1(System.String)">
            <summary>
            检测当是否存在
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.ExistAsync(System.Type,System.String)">
            <summary>
            检测当是否存在
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.RemoveAllAsync``1">
            <summary>
            删除
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.RemoveAllAsync(System.Type)">
            <summary>
            删除
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.RemoveAsync``1(System.String)">
            <summary>
            删除
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.RemoveAsync(System.Type,System.String)">
            <summary>
            删除
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Pause``1(System.String)">
            <summary>
            暂停
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Pause(System.Type,System.String)">
            <summary>
            暂停
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Pause``1">
            <summary>
            暂停
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Pause(System.Type)">
            <summary>
            暂停
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Resume``1(System.String)">
            <summary>
            （中断后）重新开始
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Resume(System.Type,System.String)">
            <summary>
            （中断后）重新开始
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Resume``1">
            <summary>
            （中断后）重新开始
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Resume(System.Type)">
            <summary>
            （中断后）重新开始
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Clear">
            <summary>
            清除所有任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Operate``1(XUCore.NetCore.EasyQuartz.OperateEnum,System.String)">
            <summary>
            操作任务
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="operate">操作类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.IJobManager.Operate(System.Type,XUCore.NetCore.EasyQuartz.OperateEnum,System.String)">
            <summary>
            操作任务
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="operate">操作类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.EasyQuartz.JobManager">
            <summary>
            Job管理
            </summary>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.#ctor(Quartz.ISchedulerFactory,Quartz.Spi.IJobFactory)">
            <summary>
            Job管理
            </summary>
            <param name="schedulerFactory"></param>
            <param name="jobFactory"></param>
        </member>
        <member name="P:XUCore.NetCore.EasyQuartz.JobManager.Scheduler">
            <summary>
            Quartz Scheduler.
            </summary>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.AddAsync``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加任务
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="cron">表达式</param>
            <param name="name">任务名（唯一id）</param>
            <param name="map">参数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.AddAsync(System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加任务
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="cron">表达式</param>
            <param name="name">任务名（唯一id）</param>
            <param name="map">参数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.GetJobKeysAsync``1">
            <summary>
            获取所有的key
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.GetJobKeysAsync(System.Type)">
            <summary>
            获取所有的key
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.ExistAsync``1(System.String)">
            <summary>
            检测当是否存在
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.ExistAsync(System.Type,System.String)">
            <summary>
            检测当是否存在
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.RemoveAllAsync``1">
            <summary>
            删除
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.RemoveAllAsync(System.Type)">
            <summary>
            删除
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.RemoveAsync``1(System.String)">
            <summary>
            删除
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.RemoveAsync(System.Type,System.String)">
            <summary>
            删除
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Pause``1(System.String)">
            <summary>
            暂停
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Pause(System.Type,System.String)">
            <summary>
            暂停
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Pause``1">
            <summary>
            暂停
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Pause(System.Type)">
            <summary>
            暂停
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Resume``1(System.String)">
            <summary>
            （中断后）重新开始
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Resume(System.Type,System.String)">
            <summary>
            （中断后）重新开始
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Resume``1">
            <summary>
            （中断后）重新开始
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Resume(System.Type)">
            <summary>
            （中断后）重新开始
            </summary>
            <param name="jobType">IJob任务类型</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Clear">
            <summary>
            清除所有任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Operate``1(XUCore.NetCore.EasyQuartz.OperateEnum,System.String)">
            <summary>
            操作任务
            </summary>
            <typeparam name="TJob">实现<see cref="T:Quartz.IJob"/>任务</typeparam>
            <param name="operate">操作类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.JobManager.Operate(System.Type,XUCore.NetCore.EasyQuartz.OperateEnum,System.String)">
            <summary>
            操作任务
            </summary>
            <param name="jobType">IJob任务类型</param>
            <param name="operate">操作类型</param>
            <param name="name">任务名（唯一id）</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.EasyQuartz.TimeUtility.TimeToQuartzCron(System.DateTime)">
            <summary>
            时间格式转换成Quartz任务调度器Cron表达式
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.ActionContextExtensions">
            <summary>
            操作上下文(<see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/>) 扩展
            </summary>
        </member>
        <member name="M:XUCore.NetCore.ActionContextExtensions.GetAreaName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Area名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.ActionContextExtensions.GetControllerName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Controller名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.ActionContextExtensions.GetActionName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Action名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.ActionContextExtensions.GetRouteValues(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取所有路由信息
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.ActionContextExtensions.RouteReplace(Microsoft.AspNetCore.Mvc.ActionContext,System.String)">
            <summary>
            根据路由参数进行模板替换
            </summary>
            <param name="context"></param>
            <param name="template">比如：static/{area}/{controller}/{action}/{id}.html</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Extensions">
            <summary>
            中间件扩展
            </summary>
            <summary>
            服务扩展
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Extensions.UseErrorLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册错误日志中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.UseRequestLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册请求日志中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.UseStaticHttpContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            启用静态请求上下文
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.UseRealIp(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册真实IP中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.UseRealIp(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            注册真实IP
            </summary>
            <param name="hostBuilder">Web主机生成器</param>
            <param name="headerKey">请求头键名</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddFlowMonitoring(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Int32,System.Int32,System.Action{System.Decimal})">
            <summary>
            数据流量控制
            </summary>
            <param name="services">服务集合</param>
            <param name="interval">默认1秒刷新一次</param>
            <param name="size">每秒限制的数据大小，单位kb</param>
            <param name="monitoring">监控</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddCacheManager(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
            <summary>
            绑定本地缓存管理
            </summary>
            <remarks>引入 ICacheManager 使用</remarks>
            <param name="services">服务集合</param>
            <param name="options"></param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddUploadService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册上传服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddUploadService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册上传服务
            </summary>
            <typeparam name="TFileUploadService">文件上传服务类型</typeparam>
            <param name="services">服务集合</param>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddOssClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ValueTuple{System.String,XUCore.NetCore.Oss.OssOptions}[])">
            <summary>
            注册oss 上传客户端
            </summary>
            <param name="services"></param>
            <param name="clients"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddOssMultiPartClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ValueTuple{System.String,XUCore.NetCore.Oss.OssOptions}[])">
            <summary>
            注册oss 分片上传客户端
            </summary>
            <param name="services"></param>
            <param name="clients"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddRazorHtml(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册Razor静态Html生成器
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddHttpService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Func{System.Net.Http.HttpMessageHandler},System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder})">
            <summary>
            注册 HttpFactory Service
            </summary>
            <param name="services"></param>
            <param name="clientName"></param>
            <param name="baseAddress"></param>
            <param name="messageHandler"></param>
            <param name="clientBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Extensions.AddHttpService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpMessageHandler},System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder})">
            <summary>
            注册 HTTPFactory Srevice
            </summary>
            <param name="services"></param>
            <param name="clientName"></param>
            <param name="client"></param>
            <param name="messageHandler"></param>
            <param name="clientBuilder"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.ViewResultExtensions">
            <summary>
            视图结果 扩展
            </summary>
        </member>
        <member name="M:XUCore.NetCore.ViewResultExtensions.ToHtml(Microsoft.AspNetCore.Mvc.ViewResult,Microsoft.AspNetCore.Http.HttpContext,System.Boolean)">
            <summary>
            转换成Html
            </summary>
            <param name="result">视图结果</param>
            <param name="httpContext">Http上下文</param>
            <param name="IsPartialView">是否部分视图，默认：false</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.ViewResultExtensions.ToHtml(Microsoft.AspNetCore.Mvc.RazorPages.PageModel,System.String)">
            <summary>
            转换成Html
            </summary>
            <param name="pageModel"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Filters.ApiElapsedTimeActionFilter">
            <summary>
            API查询时间
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Filters.ApiElapsedTimeAttribute">
            <summary>
            API查询时间
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Filters.ApiTraceAttribute">
            <summary>
            API跟踪日志过滤器
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Filters.ApiTraceAttribute.Ignore">
            <summary>
            是否忽略，为true不记录日志
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Filters.ApiTraceAttribute._logger">
            <summary>
            获取日志操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            执行
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="next">委托</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.OnActionExecutingAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,XUCore.Helpers.Str)">
            <summary>
            执行前
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.WriteLogAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,XUCore.Helpers.Str)">
            <summary>
            执行前日志
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddRequestInfoAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,XUCore.Helpers.Str)">
            <summary>
            添加请求信息参数
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddHeaders(Microsoft.AspNetCore.Http.HttpRequest,XUCore.Helpers.Str)">
            <summary>
            添加请求头
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddFormParamsAsync(Microsoft.AspNetCore.Http.HttpRequest,XUCore.Helpers.Str)">
            <summary>
            添加表单参数
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.IsMultipart(System.String)">
            <summary>
            是否multipart内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddCookie(Microsoft.AspNetCore.Http.HttpRequest,XUCore.Helpers.Str)">
            <summary>
            添加Cookie
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,XUCore.Helpers.Str)">
            <summary>
            执行后
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.WriteLog(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,XUCore.Helpers.Str)">
            <summary>
            执行后的日志
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddResponseInfo(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,XUCore.Helpers.Str)">
            <summary>
            添加响应信息参数
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ApiTraceAttribute.AddResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,XUCore.Helpers.Str)">
            <summary>
            记录响应结果
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="T:XUCore.NetCore.Filters.ExceptionHandlerAttribute">
            <summary>
            异常处理过滤器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Filters.ExceptionHandlerAttribute.#ctor(Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.Filters.ExceptionHandlerAttribute})">
            <summary>
            异常处理过滤器
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:XUCore.NetCore.Filters.ExceptionHandlerAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常处理
            </summary>
            <param name="context">异常上下文</param>
        </member>
        <member name="T:XUCore.NetCore.Filters.NoCacheAttribute">
            <summary>
            无缓存过滤器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Filters.NoCacheAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            重写OnResultExecuting()方法，取消页面缓存
            </summary>
        </member>
        <member name="T:XUCore.NetCore.GlobalSettings">
            <summary>
            全局统一序列化配置
            </summary>
        </member>
        <member name="P:XUCore.NetCore.GlobalSettings.Json_Utc_CamelCase">
            <summary>
            JSON序列化配置（UTC + 小驼峰）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.GlobalSettings.Json_Utc_Default">
            <summary>
            JSON序列化配置（UTC + 大驼峰）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.GlobalSettings.Json_Local_CamelCase">
            <summary>
            JSON序列化配置（Local + 小驼峰）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.GlobalSettings.Json_Local_Default">
            <summary>
            JSON序列化配置（Local + 大驼峰）
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpMediaType">
            <summary>
            数据MediaType类型
            </summary>
        </member>
        <member name="F:XUCore.NetCore.HttpFactory.HttpMediaType.Json">
            <summary>
            返回的数据类型为JSON
            </summary>
        </member>
        <member name="F:XUCore.NetCore.HttpFactory.HttpMediaType.MessagePack">
            <summary>
            返回的数据类型为MessagePack
            </summary>
        </member>
        <member name="F:XUCore.NetCore.HttpFactory.HttpMediaType.MessagePackJackson">
            <summary>
            返回的数据类型为MessagePack-Jackson
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpOptions`1">
            <summary>
            请求配置
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.ElapsedTimeHandler">
            <summary>
            请求时间记录事件
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.MediaType">
            <summary>
            请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/>
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.SerializerOptions">
            <summary>
            序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.ClientHandler">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpOptions`1.ErrorHandler">
            <summary>
            <see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpReceiveContent">
            <summary>
            请求成功后返回的数据读取操作
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpRemote">
            <summary>
            Http远程操作
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.HttpRemote.Service">
            <summary>
            获取HttpMessageService
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpSendContent">
            <summary>
            请求发送的数据操作
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.HttpService">
            <summary>
            HttpRequestMessage服务类
            </summary>
        </member>
        <member name="T:XUCore.NetCore.HttpFactory.IHttpOptions`1">
            <summary>
            请求配置
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.IHttpOptions`1.ElapsedTimeHandler">
            <summary>
            请求时间记录事件
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.IHttpOptions`1.ClientHandler">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.IHttpOptions`1.ErrorHandler">
            <summary>
            <see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.IHttpOptions`1.MediaType">
            <summary>
            请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/>
            </summary>
        </member>
        <member name="P:XUCore.NetCore.HttpFactory.IHttpOptions`1.SerializerOptions">
            <summary>
            序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置
            </summary>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.GetAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步GET请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PostAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PostAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PutAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PutAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PatchAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PatchAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.DeleteAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步DELETE请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.GetAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步GET请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PostAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PostAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PutAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PutAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PatchAsync``2(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.PatchAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.IHttpServiceExtensions.DeleteAsync``1(XUCore.NetCore.HttpFactory.IHttpService,XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步DELETE请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="httpMessageService"><see cref="T:XUCore.NetCore.HttpFactory.IHttpService"/>操作服务</param>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.GetAsync``1(XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步GET请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PostAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PostAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PutAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PutAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PatchAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PatchAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.DeleteAsync``1(XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.HttpMediaType,MessagePack.MessagePackSerializerOptions,System.Action{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步DELETE请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="mediaType">请求返回的数据类型<see cref="T:XUCore.NetCore.HttpFactory.HttpMediaType"/></param>
            <param name="options">序列化方式<see cref="T:XUCore.Serializer.MessagePackSerializerResolver"/>，如果是JSON不需要设置</param>
            <param name="clientHandler"><see cref="T:System.Net.Http.HttpClient"/>回调，可以添加需要的Header等</param>
            <param name="errorHandler"><see cref="T:System.Net.Http.HttpResponseMessage"/>请求异常处理，默认情况返回错误的Return模型</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.GetAsync``1(XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步GET请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PostAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PostAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步POST请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PutAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PutAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步Put请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PatchAsync``2(XUCore.Webs.UrlBuilder,``0,XUCore.NetCore.HttpFactory.IHttpOptions{``1},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TModel">提交类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="model">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.PatchAsync``1(XUCore.Webs.UrlBuilder,System.Net.Http.HttpContent,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步Patch请求
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="content">提交的模型数据</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.HttpFactory.UrlBuilderExtensions.DeleteAsync``1(XUCore.Webs.UrlBuilder,XUCore.NetCore.HttpFactory.IHttpOptions{``0},System.Threading.CancellationToken)">
            <summary>
            异步DELETE请求
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="urlBuilder"><see cref="T:XUCore.Webs.UrlBuilder"/>Url构造器</param>
            <param name="options">请求配置</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.AdminSafeListMiddleware">
            <summary>
            安全管理列表中间件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.AdminSafeListMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.AdminSafeListMiddleware._whitelist">
            <summary>
            IP白名单
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.AdminSafeListMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.Middlewares.AdminSafeListMiddleware},System.String)">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Middlewares.AdminSafeListMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
            <param name="whitelist">IP白名单</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.AdminSafeListMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.AllowCorsRequestMiddleware">
            <summary>
            允许CORS请求中间件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.AllowCorsRequestMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.AllowCorsRequestMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Middlewares.AllowCorsRequestMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.AllowCorsRequestMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.ErrorLogMiddleware">
            <summary>
            错误日志中间件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.ErrorLogMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.ErrorLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.Middlewares.ErrorLogMiddleware})">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Middlewares.ErrorLogMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.ErrorLogMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.ErrorLogMiddleware.WriteLog(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            记录错误日志
            </summary>
            <param name="context">Http上下文</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.IMiddleware">
            <summary>
            定义AspNetCore中间件
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.IMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.RealIpMiddleware">
            <summary>
            真实IP中间件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.RealIpMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.RealIpMiddleware._options">
            <summary>
            真实IP选项
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RealIpMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{XUCore.NetCore.Middlewares.RealIpOptions})">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Middlewares.RealIpMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
            <param name="options">真实IP选项</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RealIpMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.RealIpOptions">
            <summary>
            真实IP选项
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Middlewares.RealIpOptions.HeaderKey">
            <summary>
            请求头键名
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.RealIpFilter">
            <summary>
            真实IP过滤器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RealIpFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="T:XUCore.NetCore.Middlewares.RequestLogMiddleware">
            <summary>
            请求日志中间件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Middlewares.RequestLogMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.Middlewares.RequestLogMiddleware})">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Middlewares.RequestLogMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.ExecuteInterception(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否执行拦截
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.WriteLogAsync(Microsoft.AspNetCore.Http.HttpContext,System.Diagnostics.Stopwatch)">
            <summary>
            记录请求日志
            </summary>
            <param name="context">Http上下文</param>
            <param name="stopwatch">计时器</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.FormatRequestAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            格式化请求内容
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.FormatResponseAsync(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            格式化响应内容
            </summary>
            <param name="response">Http响应</param>
        </member>
        <member name="M:XUCore.NetCore.Middlewares.RequestLogMiddleware.IgnoreOctetStream(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            忽略二进制流
            </summary>
            <param name="response">Http响应</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.Upload(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="relativePath"></param>
            <param name="filePath"></param>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.Upload(System.String,System.IO.Stream,System.String)">
            <summary>
             上传文件
            </summary>
            <param name="relativePath"></param>
            <param name="stream"></param>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.MutiPartUpload(System.String,System.String)">
            <summary>
            大文件上传
            </summary>
            <param name="relativePath"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.GetBucketsList">
            <summary>
            获取Bucket列表 
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.GetObjectlist">
            <summary>
            获取Bucket中的文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.Delete(System.String)">
            <summary>
            删除一个Object
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.IOssClient.Delete">
            <summary>
            删除一个Bucket和其中的Objects 
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.Upload(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="relativePath"></param>
            <param name="filePath"></param>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.Upload(System.String,System.IO.Stream,System.String)">
            <summary>
             上传文件
            </summary>
            <param name="relativePath"></param>
            <param name="stream"></param>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.MutiPartUpload(System.String,System.String)">
            <summary>
            大文件上传
            </summary>
            <param name="relativePath"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.GetBucketsList">
            <summary>
            获取Bucket列表 
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.GetObjectlist">
            <summary>
            获取Bucket中的文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.GetSize(System.Int64)">
            <summary>
            获取文件大小
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.Delete(System.String)">
            <summary>
            删除一个Object
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Oss.OssClient.Delete">
            <summary>
            删除一个Bucket和其中的Objects 
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Properties.LibraryResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其他人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.InvalidIdCard">
            <summary>
              查找类似 身份证不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.InvalidMobilePhone">
            <summary>
              查找类似 手机号不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.NotSupportMoveToChildren">
            <summary>
              查找类似 不允许将节点移动到自己或子节点下 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.OnlyOnePredicate">
            <summary>
              查找类似 仅允许添加一个条件,条件：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.OrderIsEmptyForPage">
            <summary>
              查找类似 分页必须设置排序字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.LibraryResource.TableIsEmpty">
            <summary>
              查找类似 必须设置表名 的本地化字符串。
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Properties.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.CanceledMessage">
            <summary>
              查找类似 您已取消该操作 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.GlobalDuplicateRequest">
            <summary>
              查找类似 其他用户正在执行该操作,请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.IdIsEmpty">
            <summary>
              查找类似 Id不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.Map_MapperIsNull">
            <summary>
              查找类似 MapperExtensions.Mapper不能为空，请先设置值 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.Success">
            <summary>
              查找类似 操作成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.UnauthorizedAccessError">
            <summary>
              查找类似 授权失败，请重新获取Token 的本地化字符串。
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Properties.R.UserDuplicateRequest">
            <summary>
              查找类似 请不要重复提交 的本地化字符串。
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Razors.HtmlStaticAttribute">
            <summary>
            Razor生成Html静态文件（保存目录为wwwroot）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.HtmlStaticAttribute.Template">
            <summary>
            路径模板，范例：static/{area}/{controller}/{action}.component.html
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.HtmlStaticAttribute.MinInterval">
            <summary>
            生成的最小间隔，单位（秒），比如设置5分钟，那么5分钟之内不会再生成
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.HtmlStaticAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)">
            <summary>
            结果执行之前 before
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.HtmlStaticAttribute.IsBuildHtml(System.String)">
            <summary>
            根据条件判断是否允许生成HTML
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.HtmlStaticAttribute.WriteHtml(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,System.IO.Stream)">
            <summary>
            写HTML
            </summary>
            <param name="context"></param>
            <param name="stream"></param>
        </member>
        <member name="T:XUCore.NetCore.Razors.RazorViewHtmlAttribute">
            <summary>
            Razor生成Html静态文件（保存目录为wwwroot）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorViewHtmlAttribute.Template">
            <summary>
            路径模板，范例：static/{area}/{controller}/{action}.component.html
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorViewHtmlAttribute.MinInterval">
            <summary>
            生成的最小间隔，单位（秒），比如设置5分钟，那么5分钟之内不会再生成
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorViewHtmlAttribute.IsPartialView">
            <summary>
            是否部分视图，默认：false
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.RazorViewHtmlAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)">
            <summary>
            结果执行之前 before
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.RazorViewHtmlAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)">
            <summary>
            结果执行之后 after
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:XUCore.NetCore.Razors.RazorViewHtmlAttribute.IsBuildHtml(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)">
            <summary>
            根据条件判断是否允许生成HTML
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.RazorViewHtmlAttribute.WriteHtml(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.ViewResult)">
            <summary>
            写HTML
            </summary>
            <param name="context"></param>
            <param name="viewResult"></param>
        </member>
        <member name="T:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator">
            <summary>
            Razor静态Html生成器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.#ctor(Microsoft.Extensions.Logging.ILogger{XUCore.NetCore.Razors.DefaultRazorHtmlGenerator},XUCore.NetCore.Razors.IRouteAnalyzer)">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator"/>类型的实例
            </summary>
            <param name="routeAnalyzer">路由分析器</param>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.Generate">
            <summary>
            生成Html文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.RenderToStringAsync(XUCore.NetCore.Razors.RouteInformation)">
            <summary>
            渲染视图为字符串
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.WriteViewToFileAsync(XUCore.NetCore.Razors.RouteInformation)">
            <summary>
            将视图写入文件
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.GetPath(XUCore.NetCore.Razors.RouteInformation)">
            <summary>
            获取路径
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.GetView(Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.ActionContext,XUCore.NetCore.Razors.RouteInformation)">
            <summary>
            获取Razor视图
            </summary>
            <param name="razorViewEngine">Razor视图引擎</param>
            <param name="actionContext">操作上下文</param>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.DefaultRazorHtmlGenerator.GetRouteData(XUCore.NetCore.Razors.RouteInformation)">
            <summary>
            获取路由数据
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Razors.IRazorHtmlGenerator">
            <summary>
            Razor Html生成器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.IRazorHtmlGenerator.Generate">
            <summary>
            生成Html文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Razors.IRouteAnalyzer">
            <summary>
            路由分析器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.IRouteAnalyzer.GetAllRouteInformations">
            <summary>
            获取所有路由信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Razors.RazorHtmlAttribute">
            <summary>
            Razor生成Html静态文件
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorHtmlAttribute.Path">
            <summary>
            生成路径，相对根路径，范例：/Typings/app/app.component.html
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorHtmlAttribute.Template">
            <summary>
            路径模板，范例：Typings/app/{area}/{controller}/{controller}-{action}.component.html
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorHtmlAttribute.ViewName">
            <summary>
            视图名称，范例：/Home/Index
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RazorHtmlAttribute.IsPartialView">
            <summary>
            是否部分视图，默认：false
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Razors.RouteAnalyzer">
            <summary>
            路由分析器
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Razors.RouteAnalyzer._actionDescriptorCollectionProvider">
            <summary>
            操作描述集合提供程序
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Razors.RouteAnalyzer.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Razors.RouteAnalyzer"/>类型的实例
            </summary>
            <param name="actionDescriptorCollectionProvider">操作描述集合提供程序</param>
        </member>
        <member name="M:XUCore.NetCore.Razors.RouteAnalyzer.GetAllRouteInformations">
            <summary>
            获取所有路由信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Razors.RouteAnalyzer.SetHtmlInfo(XUCore.NetCore.Razors.RouteInformation,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            设置Html信息
            </summary>
            <param name="routeInformation">路由信息</param>
            <param name="controllerActionDescriptor">控制器</param>
        </member>
        <member name="T:XUCore.NetCore.Razors.RouteInformation">
            <summary>
            路由信息
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.AreaName">
            <summary>
            区域名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.ActionName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.Path">
            <summary>
            Razor页面路径
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.Invocation">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.TemplatePath">
            <summary>
            模板路径
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.ViewName">
            <summary>
            视图名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Razors.RouteInformation.IsPartialView">
            <summary>
            是否部分视图
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Result">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.SubCode">
            <summary>
            业务状态码
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result.ElapsedTime">
            <summary>
            请求耗时
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Result.#ctor(System.Int32,System.String,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Result"/>类型的实例
            </summary>
            <param name="code">状态码</param>
            <param name="subCode">业务状态码</param>
            <param name="message">消息</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XUCore.NetCore.Result.#ctor(XUCore.NetCore.StateCode,System.String,System.String,System.Object)">
            <summary>
            初始化返回结果
            </summary>
            <param name="code">状态码</param>
            <param name="subCode">业务状态码</param>
            <param name="message">消息</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XUCore.NetCore.Result.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Result`1">
            <summary>
            返回结构体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XUCore.NetCore.Result`1.#ctor(XUCore.NetCore.StateCode,System.String,`0)">
            <summary>
            返回结构体
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:XUCore.NetCore.Result`1.#ctor(XUCore.NetCore.StateCode,System.String,System.String,`0)">
            <summary>
            返回结构体
            </summary>
            <param name="code"></param>
            <param name="subCode"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:XUCore.NetCore.Result`1.#ctor(System.Int32,System.String,`0)">
            <summary>
            返回结构体
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:XUCore.NetCore.Result`1.#ctor(System.Int32,System.String,System.String,`0)">
            <summary>
            返回结构体
            </summary>
            <param name="code"></param>
            <param name="subCode"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="P:XUCore.NetCore.Result`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result`1.SubCode">
            <summary>
            业务状态码
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result`1.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result`1.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result`1.ElapsedTime">
            <summary>
            请求耗时
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Result`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Signature.HttpSignAttribute">
            <summary>
            http签名验证
            <para>签名算法：</para>
            <para>1、拼接appid，timestamp，noncestr字符串，并按照字符进行ASCII排序，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}</para>
            <para>2、将appSecret追加到拼接串后面，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret}</para>
            <para>3、将期字符串MD5 32位 加密，然后全部小写 ToLower</para>
            <para>4、然后进行 Sha256(md5+appSecret).ToLower() 加密后，得到签名</para>
            <para>公式：Sha256(md5(appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret})+{appSecret})</para>
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignAttribute.#ctor">
            <summary>
            http签名验证
            <para>签名算法：</para>
            <para>1、拼接appid，timestamp，noncestr字符串，并按照字符进行ASCII排序，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}</para>
            <para>2、将appSecret追加到拼接串后面，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret}</para>
            <para>3、将期字符串MD5 32位 加密，然后全部小写 ToLower</para>
            <para>4、然后进行 Sha256(md5+appSecret).ToLower() 加密后，得到签名</para>
            <para>公式：Sha256(md5(appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret})+{appSecret})</para>
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Signature.HttpSignAttribute.Prefix">
            <summary>
            header前缀，默认x-client-
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Signature.HttpSignAttribute.Timeout">
            <summary>
            超时设置（秒），默认60秒
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignAttribute.GetAppSecretAsync(System.IServiceProvider,System.String)">
            <summary>
            获取appSecret密钥
            </summary>
            <param name="serviceProvider"></param>
            <param name="appid"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignAttribute.PreventReplayAttackAsync(System.IServiceProvider,System.String,System.String,System.String)">
            <summary>
            防止重放攻击
            </summary>
            <param name="serviceProvider"></param>
            <param name="appid"></param>
            <param name="timestamp"></param>
            <param name="noncestr"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignAttribute.CreateSignAsync(System.IServiceProvider,System.String,System.String,System.String,System.String)">
            <summary>
            创建签名
            </summary>
            <param name="serviceProvider"></param>
            <param name="appid"></param>
            <param name="appSecret"></param>
            <param name="timestamp"></param>
            <param name="noncestr"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignAttribute.Result(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,XUCore.NetCore.Signature.HttpSignSubCode)">
            <summary>
            输出信息
            </summary>
            <param name="context"></param>
            <param name="subCode"></param>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignExtensions.AddHttpSignService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            注册签名服务，<see cref="T:XUCore.NetCore.Signature.HttpSignOptions"/>
            </summary>
            <param name="services"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignExtensions.UseHttpSign``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册签名中间件，<see cref="T:XUCore.NetCore.Signature.HttpSignMiddleware"/>
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignExtensions.SetSignature(System.Net.Http.HttpClient,System.String,System.String,System.String)">
            <summary>
            写入签名
            </summary>
            <param name="client"></param>
            <param name="appId">应用id</param>
            <param name="appSecret">密钥</param>
            <param name="prefix">header 前缀</param>
        </member>
        <member name="T:XUCore.NetCore.Signature.HttpSignMiddleware">
            <summary>
            http签名中间件
            <para>签名算法：</para>
            <para>1、拼接appid，timestamp，noncestr字符串，并按照字符进行ASCII排序，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}</para>
            <para>2、将appSecret追加到拼接串后面，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret}</para>
            <para>3、将期字符串MD5 32位 加密，然后全部小写 ToLower</para>
            <para>4、然后进行 Sha256(md5+appSecret).ToLower() 加密后，得到签名</para>
            <para>公式：Sha256(md5(appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret})+{appSecret})</para>
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Signature.HttpSignMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Signature.HttpSignMiddleware._options">
            <summary>
            签名选项
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{XUCore.NetCore.Signature.HttpSignOptions})">
            <summary>
            初始化一个<see cref="T:XUCore.NetCore.Signature.HttpSignMiddleware"/>类型的实例
            <para>签名算法：</para>
            <para>1、拼接appid，timestamp，noncestr字符串，并按照字符进行ASCII排序，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}</para>
            <para>2、将appSecret追加到拼接串后面，得到字符串：appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret}</para>
            <para>3、将期字符串MD5 32位 加密，然后全部小写 ToLower</para>
            <para>4、然后进行 Sha256(md5+appSecret).ToLower() 加密后，得到签名</para>
            <para>公式：Sha256(md5(appid={appid}&amp;timestamp={10位时间戳}&amp;noncestr={16位随机字符串}&amp;key={appSecret})+{appSecret})</para>
            </summary>
            <param name="next">方法</param>
            <param name="options">真实IP选项</param>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignMiddleware.GetAppSecretAsync(System.String)">
            <summary>
            获取appSecret密钥
            </summary>
            <param name="appid"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignMiddleware.PreventReplayAttackAsync(System.String,System.String,System.String)">
            <summary>
            防止重放攻击
            </summary>
            <param name="appid"></param>
            <param name="timestamp"></param>
            <param name="noncestr"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignMiddleware.CreateSignAsync(System.String,System.String,System.String,System.String)">
            <summary>
            创建签名
            </summary>
            <param name="appid"></param>
            <param name="appSecret"></param>
            <param name="timestamp"></param>
            <param name="noncestr"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.HttpSignMiddleware.WriteAsync(Microsoft.AspNetCore.Http.HttpContext,XUCore.NetCore.Signature.HttpSignSubCode)">
            <summary>
            输出信息
            </summary>
            <param name="context"></param>
            <param name="subCode"></param>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.Signature.HttpSignOptions.Prefix">
            <summary>
            header 前缀
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Signature.HttpSignOptions.TimeOut">
            <summary>
            超时时间（秒）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Signature.HttpSignOptions.IsOpen">
            <summary>
            是否开启验证
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Signature.SignParameters">
            <summary>
            签名工具类
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Signature.SignParameters.Add(System.String,System.String)">
            <summary>
            设置参数值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:XUCore.NetCore.Signature.SignParameters.CreateSign(System.String,System.String)">
            <summary>
            获取 Sign 签名
            </summary>
            <param name="key">key 秘钥的字符名称 就是叫 key</param>
            <param name="value">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.SignParameters.VaildSign(System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
            <param name="key">key 秘钥的字符名称 就是叫 key</param>
            <param name="value">秘钥</param>
            <param name="signature">客户端传递的签名</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Signature.SignParameters.JoinParams(System.String,System.String)">
            <summary>
            构造验证字符串
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.StateCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="F:XUCore.NetCore.StateCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:XUCore.NetCore.StateCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Swagger.FieldResponseAttribute">
            <summary>
            指定字段输出
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Swagger.HiddenApiAttribute">
            <summary>
            隐藏swagger接口特性标识
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Swagger.ControllerDescriptionFilter">
            <summary>
            加入controller层描述
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Swagger.ControllerDescriptionFilter.MemberXPath">
            <summary>
            匹配visual 生成的xml文件
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Swagger.ControllerDescriptionFilter.SummaryTag">
            <summary>
            提取xml的标记点
            </summary>
        </member>
        <member name="F:XUCore.NetCore.Swagger.ControllerDescriptionFilter._xmlNavigator">
            <summary>
            xml导航器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Swagger.ControllerDescriptionFilter.#ctor(System.String)">
            <summary>
            加入controller层描述
            </summary>
            <param name="apixmlpath"></param>
        </member>
        <member name="T:XUCore.NetCore.Swagger.FieldResponseHeadersFilter">
            <summary>
            接口字段输出Swagger设置
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Swagger.HiddenApiFilter">
            <summary>
            自定义Swagger隐藏过滤器
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Swagger.HiddenApiFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:XUCore.NetCore.Swagger.HttpSignResponseHeadersFilter">
            <summary>
            http签名设置
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddHttpSignDoc(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加签名header
            </summary>
            <param name="options"></param>
            <param name="services"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddJwtBearerDoc(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            添加jwt授权认证框
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddFiledDoc(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            添加指定输出文档配置
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddDescriptions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Type,System.String[])">
            <summary>
            添加文档描述
            </summary>
            <param name="options"></param>
            <param name="type">当前程序集类型，为 Swagger JSON and UI设置xml文档注释路径</param>
            <param name="docs">xml注释文档名，请把controller的xml注释文件放第一个</param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddHiddenApi(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            添加隐藏API过滤器，可以在API上加HiddenApi标签隐藏。
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置Swagger自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.String)">
            <summary>
            设置Swagger自动登录
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置Swagger退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            设置Swagger退出登录
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.AddMiniSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions},System.Action{StackExchange.Profiling.MiniProfilerOptions})">
            <summary>
            注册Swagger生成器，定义一个和多个Swagger 文档
            </summary>
            <param name="services"></param>
            <param name="swaggerGenAction"></param>
            <param name="miniProfilerAction"></param>
        </member>
        <member name="M:XUCore.NetCore.Swagger.SwaggerExtensions.UseMiniSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            启用中间件服务生成Swagger
            </summary>
            <param name="app"></param>
            <param name="swaggerAction"></param>
            <param name="swaggerUIAction"></param>
        </member>
        <member name="T:XUCore.NetCore.Uploads.DefaultFileUploadService">
            <summary>
            默认文件上传服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.UploadAsync(XUCore.NetCore.Uploads.SingleFileUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传文件。单文件
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.SaveAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="formFile">表单文件</param>
            <param name="relativePath">相对路径</param>
            <param name="rootPath">根路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.UploadAsync(XUCore.NetCore.Uploads.MultipleFileUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传文件。多文件
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.UploadImageAsync(XUCore.NetCore.Uploads.SingleImageUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传图片。单张图片
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.UploadImageAsync(XUCore.NetCore.Uploads.SingleImageBase64UploadParam,System.Threading.CancellationToken)">
            <summary>
            上传Base64图片。单张图片
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.SaveImageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="base64String">base64字符串</param>
            <param name="relativePath">相对路径</param>
            <param name="rootPath">根路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.SaveImageAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="formFile">表单文件</param>
            <param name="relativePath">相对路径</param>
            <param name="rootPath">根路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.SaveAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="formFile">表单文件</param>
            <param name="savePath">保存路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.SaveWithMd5Async(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件并返回文件MD5值
            </summary>
            <param name="formFile">表单文件</param>
            <param name="savePath">保存路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.DefaultFileUploadService.Md5(System.IO.Stream)">
            <summary>
            MD5哈希
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="T:XUCore.NetCore.Uploads.IFileUploadService">
            <summary>
            文件上传服务
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.UploadAsync(XUCore.NetCore.Uploads.SingleFileUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传文件。单文件
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.UploadImageAsync(XUCore.NetCore.Uploads.SingleImageUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传图片。单张图片
            </summary>
            <param name="param"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.UploadImageAsync(XUCore.NetCore.Uploads.SingleImageBase64UploadParam,System.Threading.CancellationToken)">
            <summary>
            上传Base64图片。单张图片
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.UploadAsync(XUCore.NetCore.Uploads.MultipleFileUploadParam,System.Threading.CancellationToken)">
            <summary>
            上传文件。多文件
            </summary>
            <param name="param">参数</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.SaveAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="formFile">表单文件</param>
            <param name="savePath">保存路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:XUCore.NetCore.Uploads.IFileUploadService.SaveWithMd5Async(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件并返回文件MD5值
            </summary>
            <param name="formFile">表单文件</param>
            <param name="savePath">保存路径</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:XUCore.NetCore.Uploads.MultipleFileUploadParam">
            <summary>
            多文件上传参数
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.Request">
            <summary>
            当前请求
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.FormFiles">
            <summary>
            上传的文件对象
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.RootPath">
            <summary>
            存储根路径
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.Module">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.Group">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.FullPath">
            <summary>
            完整目录
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.MultipleFileUploadParam.RelativePath">
            <summary>
            相对目录
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Uploads.SingleFileUploadParam">
            <summary>
            单文件上传参数
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParam.Request">
            <summary>
            当前请求
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParam.FormFile">
            <summary>
            上传的文件对象
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Uploads.SingleFileUploadParamBase">
            <summary>
            单文件上传参数
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParamBase.RootPath">
            <summary>
            存储根路径
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParamBase.Module">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParamBase.Group">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParamBase.FullPath">
            <summary>
            完整目录
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleFileUploadParamBase.RelativePath">
            <summary>
            相对目录
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.Base64String">
            <summary>
            图片base64
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.IsZoomOriginal">
            <summary>
            是否等比缩放原图
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.Ratio">
            <summary>
            缩放比率（1-100）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.Quality">
            <summary>
            压缩质量（数字越小压缩率越高）1-100
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.IsCutOriginal">
            <summary>
            是否裁剪原图
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.AutoCutSize">
            <summary>
            自动裁剪原图的最大高度和宽度
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.ThumbCutMode">
            <summary>
            缩略图裁剪方式（原图不动，若设置了裁剪尺寸，则启用该选项）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageBase64UploadParam.Thumbs">
            <summary>
            裁剪缩略图尺寸 item = 300x400
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.Extensions">
            <summary>
            允许上传的文件扩展名
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.Size">
            <summary>
            允许上传的图片文件大小，默认2M
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.IsZoomOriginal">
            <summary>
            是否等比缩放原图
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.Ratio">
            <summary>
            缩放比率（1-100）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.Quality">
            <summary>
            压缩质量（数字越小压缩率越高）1-100
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.IsCutOriginal">
            <summary>
            是否裁剪原图
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.AutoCutSize">
            <summary>
            自动裁剪原图的最大高度和宽度
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.ThumbCutMode">
            <summary>
            缩略图裁剪方式（原图不动，若设置了裁剪尺寸，则启用该选项）
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Uploads.SingleImageUploadParam.Thumbs">
            <summary>
            裁剪缩略图尺寸 item = 300x400
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IMediatorHandler">
            <summary>
            消息总线
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IMediatorHandler.PublishEvent``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布事件通知
            </summary>
            <typeparam name="TNotification"></typeparam>
            <param name="event">通知事件</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.IMediatorHandler.SendCommand``1(XUCore.Ddd.Domain.Command{``0},System.Threading.CancellationToken)">
            <summary>
            发送命令请求
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command">命令</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.MediatorMemoryBus">
            <summary>
            Mediator 消息中介发布请求和通知
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.MediatorMemoryBus.NotEventStore">
            <summary>
            不需要存储的事件
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.MediatorMemoryBus.PublishEvent``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布事件通知
            </summary>
            <typeparam name="TNotification"></typeparam>
            <param name="event">通知事件</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.MediatorMemoryBus.SendCommand``1(XUCore.Ddd.Domain.Command{``0},System.Threading.CancellationToken)">
            <summary>
            发送命令请求
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="command">命令</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.ClaimAttributes">
            <summary>
            Claim属性
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.IdentityServerUserId">
            <summary>
            认证授权用户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserNickName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.UserToken">
            <summary>
            用户登录token
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.RefreshExpires">
            <summary>
            刷新有效期
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.TenantType">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.ClaimAttributes.DataIsolationType">
            <summary>
            数据隔离
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.Command">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Command.ValidationResult">
            <summary>
            命令验证
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Command.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Command.GetErrors">
            <summary>
            获取验证的错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Command.GetErrors(System.String)">
            <summary>
            获取验证的错误消息
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Command.IsVaild">
            <summary>
            是否验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandHandler`2">
            <summary>
            领域命令处理程序
            用来作为全部处理程序的基类，提供公共方法和接口数据
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.CommandHandler`2.bus">
            <summary>
            注入中介处理接口（目前用不到，在领域事件中用来发布事件）
            </summary>
        </member>
        <member name="F:XUCore.Ddd.Domain.CommandHandler`2.mapper">
            <summary>
            AutoMapper
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandHandler`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandHandler`2.#ctor(XUCore.Ddd.Domain.IMediatorHandler)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandHandler`2.#ctor(XUCore.Ddd.Domain.IMediatorHandler,AutoMapper.IMapper)">
            <summary>
            构造函数
            </summary>
            <param name="bus">注入中介处理接口</param>
            <param name="mapper">automapper</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandValidator`1">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="T:XUCore.Ddd.Domain.Command`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Command`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CreateCommand">
            <summary>
            创建命令
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.UpdateCommand`1">
            <summary>
            更新命令
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:XUCore.Ddd.Domain.ListCommand">
            <summary>
            列表命令
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.PageCommand">
            <summary>
            分页命令
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandId`2">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.CommandId`2.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandId`2.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandIdValidator`3">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandIdValidator`3.AddIdValidator">
            <summary>
            Id验证
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandIds`2">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.CommandIds`2.Ids">
            <summary>
            主键Id集合
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandIds`2.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandIdsValidator`3">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandIdsValidator`3.AddIdsValidator">
            <summary>
            Id集合验证（不可为空）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandLimit`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.CommandLimit`1.Limit">
            <summary>
            记录数
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandLimit`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandLimitValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandLimitValidator`2.AddLimitVaildator(System.Int32)">
            <summary>
            Limit验证（大于等于0 且小于默认100）
            </summary>
            <param name="max">最大数值（默认100）</param>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandPage`1">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.CommandPage`1.CurrentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.CommandPage`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandPage`1.#ctor">
            <summary>
            抽象命令基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandPageValidator`2">
            <summary>
            命令验证抽象基类
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.CommandPageValidator`2.AddPageVaildator(System.Int32)">
            <summary>
            分页验证(当前页码必须大于0，分页大小必须大于0且小于等于指定大小)
            </summary>
            <param name="maxPageSize">最大分页大小（默认100）</param>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddRequestBehaviour(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{XUCore.Ddd.Domain.RequestOptions})">
            <summary>
            注册 DDD Mediator 监控等插件
            </summary>
            <param name="services"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddMediatorBus``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD Mediator 消息总线
            </summary>
            <typeparam name="TMediator"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.DependencyInjection.AddEventStore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册 DDD 事件存储
            </summary>
            <typeparam name="TEventStore"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Entity`1">
            <summary>
            定义领域实体基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Entity`1.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.Equals(System.Object)">
            <summary>
            重写方法 相等运算
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.op_Equality(XUCore.Ddd.Domain.Entity{`0},XUCore.Ddd.Domain.Entity{`0})">
            <summary>
            重写方法 实体比较 ==
            </summary>
            <param name="a">领域实体a</param>
            <param name="b">领域实体b</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.op_Inequality(XUCore.Ddd.Domain.Entity{`0},XUCore.Ddd.Domain.Entity{`0})">
            <summary>
            重写方法 实体比较 !=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.GetHashCode">
            <summary>
            获取哈希（为了保持领域一致性，采用Id获取hashcode，实体主外键映射实体中，添加多条记录的时候，ICollection不可以使用HashSet，否则无法添加）
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.Ddd.Domain.Entity`1.ToString">
            <summary>
            输出领域对象的状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.Event">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Event.Timestamp">
            <summary>
            当前触发时间
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Event.#ctor">
            <summary>
            事件基类
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IEventStoreService">
            <summary>
            领域存储服务接口
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IEventStoreService.Save``1(``0)">
            <summary>
            将命令模型进行保存
            </summary>
            <typeparam name="T"> 泛型：Event命令模型</typeparam>
            <param name="theEvent"></param>
        </member>
        <member name="T:XUCore.Ddd.Domain.Message">
            <summary>
            抽象类Message，用来获取我们事件执行过程中的类名
            然后并且添加聚合根
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Message.MessageType">
            <summary>
            消息类型（命令）
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.Message.AggregateId">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.Message.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.NotificationEventHandler`1">
            <summary>
            事件通知抽象基类
            </summary>
            <typeparam name="TNotification"></typeparam>
        </member>
        <member name="M:XUCore.Ddd.Domain.NotificationEventHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            事件执行
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandValidationAttribute">
            <summary>
            FluentValidation 验证拦截（因使用动态API，自动验证失效，导致需要手工操作。）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.CommandValidationActionFilter">
            <summary>
            FluentValidation 验证拦截（因使用动态API，自动验证失效，导致需要手工操作。）
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.IUser">
            <summary>
            用户信息接口
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.GetId``1">
            <summary>
            用户Id转换类型
            </summary>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.IUser.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.SetToken(System.String,System.String)">
            <summary>
            将登录的用户写入内存作为标记，处理强制重新获取jwt，模拟退出登录（可以使用redis）
            </summary>
            <param name="id"></param>
            <param name="token"></param>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.RemoveToken">
            <summary>
            删除登录标记，模拟退出
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.IUser.VaildToken(System.String)">
            <summary>
            验证token是否一致
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.Ddd.Domain.RequestOptions">
            <summary>
            Mediator 请求插件启用配置
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Logger">
            <summary>
            请求日志，输出请求命令具体位置记录
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Performance">
            <summary>
            性能监控，输出记录超过500ms的请求
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.RequestOptions.Validation">
            <summary>
            自动验证，<see cref="T:FluentValidation.IValidator"/>异常抛出，需要配合try catch捕获处理
            </summary>
        </member>
        <member name="T:XUCore.Ddd.Domain.User">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.Identity">
            <summary>
            IIdentity
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.Id">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.GetId``1">
            <summary>
            用户Id转换类型
            </summary>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XUCore.Ddd.Domain.User.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.SetToken(System.String,System.String)">
            <summary>
            将登录的用户写入内存作为标记，处理强制重新获取jwt，模拟退出登录（可以使用redis）
            </summary>
            <param name="id"></param>
            <param name="token"></param>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.RemoveToken">
            <summary>
            删除登录标记，模拟退出
            </summary>
        </member>
        <member name="M:XUCore.Ddd.Domain.User.VaildToken(System.String)">
            <summary>
            验证token是否一致
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperViewExtensions.AddMvcAction(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册Mvc Html.Action操作
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
