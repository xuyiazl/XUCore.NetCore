<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUCore.NetCore.Mongo</name>
    </assembly>
    <members>
        <member name="T:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1">
            <summary>
            mongodb的基础仓库支持类
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="P:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.BsonIds">
            <summary>
            主键属性名
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Connection">
            <summary>
            mongo的连接字符串,支持多个连接地址的mongo操作
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetDatabaseConfig(System.String)">
            <summary>
            获取对应的数据库
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Table">
            <summary>
            获得数据Collection内容
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetBsonIds">
            <summary>
            获得具有bsonId的属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Add(`0,System.Nullable{System.Boolean})">
            <summary>
            添加
            </summary>
            <param name="model"></param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.AddAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步添加
            </summary>
            <param name="model"></param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步批量添加
            </summary>
            <param name="models"></param>
            <param name="isOrdered">是否按顺序写入</param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步批量添加
            </summary>
            <param name="models"></param>
            <param name="isOrdered">是否按顺序写入</param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步更新
            </summary>
            <param name="model"></param>
            <param name="where">条件</param>
            <param name="isUpsert">不存在时插入该文档</param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Update(`0,MongoDB.Driver.FilterDefinition{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步更新
            </summary>
            <param name="model"></param>
            <param name="filter">条件</param>
            <param name="isUpsert">不存在时插入该文档</param>
            <param name="bypassDocumentValidation">是否绕过文档验证</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步更新
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.UpdateAsync(`0,MongoDB.Driver.FilterDefinition{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步更新
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            批量更新
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步批量更新
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            同步修改（部分字段）
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步修改（部分字段）
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量修改（部分字段）
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            异步批量修改（部分字段）
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.BulkAdd(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            大批量写入
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.BulkAddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步大批量写入
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.BulkWrite(System.Collections.Generic.IEnumerable{MongoDB.Driver.WriteModel{`0}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            大批量操作
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.BulkWriteAsync(System.Collections.Generic.IEnumerable{MongoDB.Driver.WriteModel{`0}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步大批量操作
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.DeleteOne(`0)">
            <summary>
            删除指定单一记录
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.FindOneAndDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件，删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.DeleteOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，异步删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.DeleteOneAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，异步删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，批量删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.Delete(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，批量删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，异步批量删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.DeleteAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，异步批量删除
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取指定Linq条件总记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetCount(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获取指定Filter条件总记录数
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            异步获取指定Linq条件总记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetCountAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            异步获取指定Filter条件总记录数
            </summary>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetById(System.Object)">
            <summary>
            获取指定主键id记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            异步获取指定主键id记录
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获得指定Linq条件内的单条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetSingle(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得指定Filter内的单条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Linq条件内的单条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetSingleAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Filter内的单条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetList">
            <summary>
            获取当前所有集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetListAsync(System.Threading.CancellationToken)">
            <summary>
            异步获取当前所有集合
            </summary>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Nullable{System.Int32})">
            <summary>
            获得指定Linq条件内的多条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetList(MongoDB.Driver.FilterDefinition{`0},System.String,System.Nullable{System.Int32})">
            <summary>
            获得指定Filter内的多条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Linq条件内的多条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetListAsync(MongoDB.Driver.FilterDefinition{`0},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Filter内的多条数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetPagedList(MongoDB.Driver.FilterDefinition{`0},System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步分页获取数据
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.AbstractMongoBaseRepository`1.GetPagedListAsync(MongoDB.Driver.FilterDefinition{`0},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步分页获取数据
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Mongo.ModelPropertyAttribute">
            <summary>
            Mongo Property Attribute
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.ModelPropertyAttribute.ConnectionName">
            <summary>
            数据库连接别名，等同于配置文件里mongo数据库连接里的ConnectionName，两者必须一致，多个mongo连接串请配置不同的名称
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.ModelPropertyAttribute.TableName">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.ModelPropertyAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoBaseModel.ObjectId">
            <summary>
            自定义标识的主键ID
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoBaseModel.RecordTicks">
            <summary>
            记录时间戳
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Mongo.IMongoBaseRepository`1">
            <summary>
            mongodb的基础仓库
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetBsonIds">
            <summary>
            获得具有bsonId的属性
            </summary>
            <returns></returns>
        </member>
        <member name="P:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Table">
            <summary>
            获得数据Collection内容
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Add(`0,System.Nullable{System.Boolean})">
            <summary>
            添加
            </summary>
            <param name="model">对象信息</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.AddAsync(`0,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步添加
            </summary>
            <param name="model">对象信息</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Add(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步批量添加
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步批量添加
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步更新
            </summary>
            <param name="model">对象信息</param>
            <param name="where">设置一个更新条件，默认：匹配BsonId；</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Update(`0,MongoDB.Driver.FilterDefinition{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            同步更新
            </summary>
            <param name="model">对象信息</param>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步更新
            </summary>
            <param name="model">对象信息</param>
            <param name="where">设置一个更新条件，默认：匹配BsonId；</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.UpdateAsync(`0,MongoDB.Driver.FilterDefinition{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步更新
            </summary>
            <param name="model">对象信息</param>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            批量更新
            </summary>
            <param name="models">对象信息</param>
            <param name="where">设置一个更新条件，默认：匹配BsonId；</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步批量更新
            </summary>
            <param name="models">对象信息</param>
            <param name="where">设置一个更新条件，默认：匹配BsonId；</param>
            <param name="isUpsert">获取或设置一个值，该值指示如果不存在，是否插入</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            同步修改（部分字段）
            </summary>
            <param name="where">更新条件</param>
            <param name="field">指定字段</param>
            <param name="value">更新值</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步修改（部分字段）
            </summary>
            <param name="where">更新条件</param>
            <param name="field">指定字段</param>
            <param name="value">更新值</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量修改（部分字段）
            </summary>
            <param name="where">更新条件</param>
            <param name="update">更新字段</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            异步批量修改（部分字段）
            <param name="where">更新条件</param>
            <param name="update">更新字段</param>
            <param name="cancellationToken"></param>
            </summary>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.BulkAdd(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            大批量写入
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.BulkAddAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步大批量写入
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.BulkWrite(System.Collections.Generic.IEnumerable{MongoDB.Driver.WriteModel{`0}},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            大批量操作
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.BulkWriteAsync(System.Collections.Generic.IEnumerable{MongoDB.Driver.WriteModel{`0}},System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步大批量操作
            </summary>
            <param name="models">对象信息</param>
            <param name="isOrdered">获取或设置一个值，该值指示请求是否按顺序添加。</param>
            <param name="bypassDocumentValidation">获取或设置一个值，该值指示是否绕过文档验证。</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.DeleteOne(`0)">
            <summary>
            删除指定单一记录
            </summary>
            <remarks>默认按当前对象主键ID删除</remarks>
            <param name="t">删除对象</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.FindOneAndDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件，删除
            </summary>
            <param name="where">条件</param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.DeleteOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，异步删除
            </summary>
            <param name="where">条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.DeleteOneAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，异步删除
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，批量删除
            </summary>
            <param name="where">条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.Delete(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，批量删除
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            按条件，异步批量删除
            </summary>
            <param name="where">条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.DeleteAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            按条件，异步批量删除
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取指定Linq条件总记录数
            </summary>
            <param name="where">linq表达式</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetCount(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获取指定Filter条件总记录数
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            异步获取指定Linq条件总记录数
            </summary>
            <param name="where">linq表达式</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetCountAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            异步获取指定Filter条件总记录数
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="cancellationToken"></param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetById(System.Object)">
            <summary>
            获取指定主键id记录
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            异步获取指定主键id记录
            </summary>
            <param name="id">主键ID</param>
            <param name="cancellationToken"></param>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获得指定Linq条件内的单条数据
            </summary>
            <param name="where">linq表达式</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetSingle(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            获得指定Filter内的单条数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Linq条件内的单条数据
            </summary>
            <param name="where">筛选条件</param>
            <param name="cancellationToken"></param>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetSingleAsync(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Filter内的单条数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="cancellationToken"></param>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetList">
            <summary>
            获取当前所有集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetListAsync(System.Threading.CancellationToken)">
            <summary>
            异步获取当前所有集合
            </summary>
            <returns>返回异步结果</returns>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Nullable{System.Int32})">
            <summary>
            获得指定Linq条件内的多条数据
            </summary>
            <param name="where">linq表达式</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="limit">指定条数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetList(MongoDB.Driver.FilterDefinition{`0},System.String,System.Nullable{System.Int32})">
            <summary>
            获得指定Filter内的多条数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="limit">指定条数</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Linq条件内的多条数据
            </summary>
            <param name="where">筛选条件</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="limit">指定条数</param>
            <param name="cancellationToken"></param>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetListAsync(MongoDB.Driver.FilterDefinition{`0},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步获得指定Filter内的多条数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="limit">指定条数</param>
            <param name="cancellationToken"></param>
            <returns>返回异步结果</returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetPagedList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据
            </summary>
            <param name="selector">linq表达式</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页尺码</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetPagedList(MongoDB.Driver.FilterDefinition{`0},System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页尺码</param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetPagedListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步分页获取数据
            </summary>
            <param name="selector">linq表达式</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页尺码</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XUCore.NetCore.Mongo.IMongoBaseRepository`1.GetPagedListAsync(MongoDB.Driver.FilterDefinition{`0},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步分页获取数据
            </summary>
            <param name="filter">基础过滤器，请使用Builders构建条件</param>
            <param name="orderby">多个OrderBy用逗号隔开，exp:"name asc,createtime desc"</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页尺码</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:XUCore.NetCore.Mongo.IMongoService`1">
            <summary>
            定义Mongo的连接服务
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Mongo.MongoConnection">
            <summary>
            mongo的连接配置
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoConnection.ConnectionString">
            <summary>
            Mongo的连接字符串
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoConnection.ConnectionName">
            <summary>
            连接字符串别名
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoConnection.Connection">
            <summary>
            获得当前的连接属性
            </summary>
        </member>
        <member name="P:XUCore.NetCore.Mongo.MongoConnection.Client">
            <summary>
            获得当前的数据库
            </summary>
        </member>
        <member name="T:XUCore.NetCore.Mongo.MongoException">
            <summary>
            mongo的异常对象
            </summary>
        </member>
    </members>
</doc>
